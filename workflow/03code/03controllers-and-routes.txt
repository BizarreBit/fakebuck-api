routes/authRoute.js
#const router = require("express").Router();
#module.exports = router;

#const authController = require("../controller/authController")
#router.post("/login", authController.login);
#router.post("/signup", authController.signup);

controllers/authController.js -> (code according to API Endpoint Doc)
#exports.login = async (req, res, next) => {
  try {
  } catch (err) {
    next(err);
  }
};

#exports.signup = async (req, res, next) => {
  try {
  } catch (err) {
    next(err);
  }
};


(SIGNUP)
#const { firstName, lastName, emailOrPhone, password, confirmPassword } =
      req.body;

utilities/createError.js -> (make a custom error throwing utility)

#const createError = require("../utilities/createError");
#if (!emailOrPhone) {
    createError("an email or a phone number is required", 400);
}
#if (!password) {
    createError("password is required", 400);
}
#if (password !== confirmPassword) {
    createError("confirm password mismatch", 400);
}
#if (password.length < 8) {
    createError(
    "password length must be equal or greater than 8 characters",
    400
    );
}

> npm i validator
#const validator = require("validator");
#const isMobilePhone = validator.isMobilePhone(emailOrPhone + "");
#const isEmail = validator.isEmail(emailOrPhone + "");
#if (!isMobilePhone && !isEmail) {
    createError("email or phone number is invalid format", 400);
}

#const bcrypt = require("bcryptjs");
#const hashedPassword = await bcrypt.hash(password, 12);
#const user = await Users.create({
    firstName,
    lastName,
    phoneNumber: isMobilePhone ? emailOrPhone : null,
    email: isEmail ? emailOrPhone : null,
    password: hashedPassword,
});

.env -> JWT_SECRET_KEY
#const jwt = require("jsonwebtoken");
#const payload = {
    id: user.id,
};
#const token = jwt.sign(payload, process.env.JWT_SECRET_KEY, {
    expiresIn: "7d",
});

app.js ->   #const authRouter = require("./routes/authRoute");
            #app.use("/auth", authRouter);

npm start
(test with postman)

(LOGIN)
#const { emailOrPhone, password } = req.body;
#const { Op } = require("sequelize")
#const user = await User.findOne({
    where: {
    [Op.or]: [{ phoneNumber: emailOrPhone }, { email: emailOrPhone }],
    },
});
#if (!user) {
    createError("invalid credential", 400);
}

#const isMatch = await bcrypt.compare(password, user.password);
#if (!isMatch) {
    createError("invalid credential", 400);
}

.env -> JWT_EXPIRES_IN=7d

#const genToken = (payload) =>
  jwt.sign(payload, process.env.JWT_SECRET_KEY, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });
#const token = genToken({id: user.id})
#res.status(201).json({ token });
(test with postman)


(GET me)
controllers/userController.js
routes/userRoute.js
app.js

controllers/userController.js
middlewares/authenticate.js
app.js

controllers/userController.js
middlewares/authenticate.js
  #attributes: {
    exclude: ["password"],
  },

(Request friend)
controllers/friendController.js
routes/friendRoute.js
app.js

controllers/friendController.js
config/constants.js
models/Friend.js
controllers/friendController.js

(Accept friend, Delete friend)
controllers/friendController.js
routes/friendRoute.js

controllers/friendController.js
    (change API Doc PATCH :friendId to :fromUserId)
PATCH       /friends/:fromUserId
//BODY        status          required
routes/friendRoute.js
controllers/friendController.js
(test with postman)

(Get All friend)
routes/friendRoute.js
controllers/friendController.js -> getAllFriend 
services/friendService.js -> findAcceptedFriend
controllers/friendController.js

controllers/friendController.js
services/friendService.js -> findPendingFriend

controllers/friendController.js
services/friendService.js -> findRequestedFriend

controllers/friendController.js
services/friendService.js -> findUnknown

controllers/friendController.js -> switch case
(test with postman)

*****************(CC11 25-05-2022 1:10:18 save lost recovery)
(Update Image)
controllers/userController.js --> #exports.updateImage
routes/userRoute.js --> #router.patch("/", userController.updateImage)

  (Dealing with form-data using Multer)
  > npm i multer

  middlewares/upload.js -->
  #const multer = require("multer");

    (dest -- not much useful)
  #module.exports = multer({ dest: "public/images" });
  
  public/images --> create new folder

  routes/userRoute.js --> #upload.single("profileImage")
  controllers/userController.js -->


  controllers/userController.js --> #console.log(req.file);
  { -- req.file
    fieldname: 'profileImage',
    originalname: 'cool-avatar-icons-59.png',
    encoding: '7bit',
    mimetype: 'image/png',
    destination: 'public/images',
    filename: '1658920439759.png',
    path: 'public\\images\\1658920439759.png',
    size: 43409
  }

    (storage -- more useful)
    middlewares/upload.js -->
    #const storage = multer.diskStorage({
      destination: (req, file, cb) => {
        // console.log(file);
        // cb("Error", "destination");  //node pattern "error-first callback style"
        cb(null, "public/images");
      },
      filename: (req, file, cb) => {
        cb(null, "1111");
      },
    });
    #module.exports = multer({ storage });

      (get and set file name and type)
      #cb(null, new Date().getTime() + "." + file.mimetype.split("/")[1]);
    
  controllers/userController.js -->
  #await User.update(
    { profileImage: req.file.path },
    { where: { id: req.user.id } }
  );
  #res.json({ profileImage: req.file.path });

  (Using cloud server -- cloundinary)
  https://cloudinary.com/documentation/node_quickstart
  > npm i cloudinary
  https://cloudinary.com/console/
  .api --> CLOUDINARY_URL=cloudinary://

    (import library)
  controllers/userController.js -->
  #const cloudinary = require("cloudinary").v2;

      (callback form)
    #cloudinary.uploader.upload(req.file.path, async (error, result) => {
      if (error) {
        return next(error)
    }

        (sample result)
      https://cloudinary.com/documentation/image_upload_api_reference#upload_response
      
    #await User.update(
      { profileImage: result.secure_url },
      { where: { id: req.user.id } }
    );
    #res.status(200).json({ profileImage: result.secure_url });

      (remove temp image file)
    const fs = require("fs");
    rs.unlinkSync(req.file.path)

      (promise form)
    utilities/cloudinary.js --> #const util = require("util");
    #const cloudinary = require("cloudinary").v2;
    #exports.upload = util.promisify(cloudinary.uploader.upload);

    controllers/userController.js -->
    #const cloudinary = require("../utilities/cloudinary");
    #if (!req.file) {
      createError("profileImage is required", 400)
    }
    #const result = await cloudinary.upload(req.file.path);
    #await User.update(
      { profileImage: result.secure_url },
      { where: { id: req.user.id } }
    );
    #fs.unlinkSync(req.file.path);
    #    res.status(200).json({ profileImage: result.secure_url });

      (multiple fields) 
      upload.single --> upload.fields
      req.file      --> req.files
    #router.patch(
      "/",
      upload.fields([
        { name: "profileImage", maxCount: 1 },
        { name: "coverImage", maxCount: 1 },
      ]),
      userController.updateImage
    );

    [Object: null prototype] {  -- req.files
      profileImage: [
        {
          fieldname: 'profileImage',
          originalname: 'cool-avatar-icons-59.png',
          encoding: '7bit',
          mimetype: 'image/png',
          destination: 'public/images',
          filename: '1658923744768.png',
          path: 'public\\images\\1658923744768.png',
          size: 43409
        }
      ],
      coverImage: [
        {
          fieldname: 'coverImage',
          originalname: 'Screenshot (1).png',
          encoding: '7bit',
          mimetype: 'image/png',
          destination: 'public/images',
          filename: '1658923744770.png',
          path: 'public\\images\\1658923744770.png',
          size: 420538
        }
      ]
    }

    #if (!req.files) {
      createError("profileImage or coverImage is required", 400);
    }
    #if (req.files.profileImage) {
      const result = await cloudinary.upload(req.files.profileImage[0].path);
    }
    if (req.files.coverImage) {
      const result = await cloudinary.upload(req.files.coverImage[0].path);
    }

      (save to the database)
    #const updateValue = {};
      #updateValue.profileImage = result.secure_url;
    #await User.update(updateValue, { where: { id: req.user.id } });

      (send response)
    #res.status(200).json(updateValue);

      (remove temporary image file even an error occur)
    #finally {
      if (req.files.profileImage) {
        fs.unlinkSync(req.files.profileImage[0].path);
      }
      if (req.files.coverImage) {
        fs.unlinkSync(req.files.coverImage[0].path);
      }
    }

      (remove unused previous image file on cloud)
    https://cloudinary.com/documentation/image_upload_api_reference#destroy
        (destroy method)
      utilities/cloudinary.js --> 
      #exports.destroy = util.promisify(cloudinary.uploader.destroy);

        (check if null, split to get public_id , destroy)
      if (req.user.profileImage) {
        const splited = req.user.profileImage.split("/");
        const publicId = splited[splited.length - 1].split(".")[0];
        await cloudinary.destroy(publicId)
      }

*****************(CC11 25-05-2022 1:10:18 save lost recovery)

      (temporary image file name collision bug fix)
    > npm i uuid
    middlewares/upload.js -->
    #const { v4: uuidv4 } = require("uuid");
    #cb(null, uuidv4() + "." + file.mimetype.split("/")[1]);


(Create Post)
controllers/postController.js --> #exports.createPost async
routes/postRoute.js --> #router.post("/", postController.createPost);
app.js --> #app.use("/posts", authenticate, postRouter);

routes/postRoute.js --> #upload.single("image")
controllers/postController.js -->
#finally {
    if (req.files.image) {
      fs.unlinkSync(req.files.image[0].path);
    }
  }

#const { message } = req.body;
#if (typeof message !== "string" && !req.file) {
  createError("a message or an image is required", 400);
}
#if (req.file) {
  var { secure_url: image } = await cloudinary.upload(req.file.path);
}
#const post = await Post.create({
  message,
  image,
  userId: req.user.id,
});
#res.status(200).json({ post });

(Edit Post)
(Delete Post)

(Like Post)
    (transaction) prevent corrupt data due to an error in database instruction set 
        SQL1  Delete  \
        SQL2  Create    } transaction
        SQL3  Update  /
        ถ้า all success จึงค่อย commit database
        ถ้า one fail    ให้ rollback
        https://sequelize.org/docs/v6/other-topics/transactions/
          (Unmanaged transaction)(mannal start, specify transaction, commit, rollback)
            // First, we start a transaction and save it into a variable
            const t = await sequelize.transaction();

            controllers/postController.js --> 
              #const { Post, Like, sequelize } = require("../models");
              #const t = await sequelize.transaction();

              #const like = await Like.create(
                {
                  postId: id, //foreignKey constrain
                  userId: req.user.id,
                },
                { transaction: t }
              );
              #await post.increment({ likeCount: 1 }, { transaction: t });
              #await t.commit();

              #await t.rollback();

(Unlike Post)
